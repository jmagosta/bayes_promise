---
title: "A Data Scientist's view of running `R` in Visual Studio Code"
author: "John Mark Agosta"
date: "2025-04-28"
format: pdf
---


VS Code positions itself as the software development of choice that can be customized for multiple languages, and as a data scientist `R - python` integration is paramount. Its ecosystem is rich with *Extensions* to add language specific features, including features for machine learning specific notebook and visualization tools. For `R` language development, the RStudio development environment by Posix (who changed their name from RStudio) still sets the standard. VS Code has appropriated most features available from RStudio, including the `quarto`. coding and publishing system. While RStudio is more "quarto native" – with all its document publishing ability – VS Code opens up debugging and Cloud integrations for more extensive programming projects. You get to take your pick!

## How to run R with Python in VS Code

There is more than one way to do this. These are the various ways covered in this article:

1.  Use VS Code's R Extension and Debugger to run `.R` files.
2.  Run R code in Jupyter Notebooks, in VS Code.
3.  Run R code using `rpy2` in `python` Notebooks.
4.  Run `qmd` Quarto markdown documents.

Here's a note about how to start using it for the `R` language; in particular how it integrates with `python`, making it possible to switch back and forth between them in the same notebook.

## 1. Running `.R` files

### First check your current `R` executable.

First you need to set up your current `R` executable environment. Assume you have a current working `R` version that runs in the terminal, and, from `R`, when you run

`> .libPaths()`

to check that it returns a valid path. On my mac this is what appears:

`[1] "/Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library"`

On the Mac, VS Code finds the R executable and library paths automatically. You can check this by opening a shell (e.g. zsh, or bash) in VS Code and invoking `R`.

### Integration requires these installs:

-   First, in `R` add the [languageserver](https://github.com/microsoft/vscode-languageserver-node) package

`> install.packages("languageserver")`

This package exposes an API for common text editors, not specific to VS Code

-   Then install the [*R Extension for Visual Studio Code*](https://github.com/REditorSupport/vscode-R) Extension. (Don't confuse it with "R Tools" or other of the several R related extensions available). It needs to be enabled:

![](./RextensionforVSCode.png){width="450"}

Configuring the Extension is done by the dropdown on the "gear" icon. However the default settings typically work fine. Find settings under the Extension header in a drop-down menu attached to the gear icon:

![](./settings.png){width="280"}

The R Extension recommends installing also the [R Debugger Extension](https://github.com/ManuelHentschel/VSCode-R-Debugger/releases) to enable source code debugging.

Now when you do a `New File...` from the VS Code menu you'll have choice of both an `.R` file and `.rmd` file option. R files include "intellisense" popup suggestions for command completion in addition to other smart editor features. For now try the `.R` file feature; `.rmd` files need additional extensions enabled. The R Extension also adds an "R terminal" to the list of choices in the lower right terminal dropdown:

![R Terminal dropdown](terminal_dropdown.png)

*but you don't need to create an active R terminal to execute R code*, as shown here:

### How to execute `.R` files

-   The R Extension enables the keyboard shortcut `cmd-return` (Mac) to send the current line or file selection to the R process running in the current terminal window, or creates a process to run it if none exists. *I'm not sure if this always finds the right R process. To assure that the R Extension has an attached R process. I suggest you start an R terminal before executing any R code to get attached features to work.*

-   Of course you can interact directly with the R process at the prompt in the terminal. (This does not require you to load the languageserver library in the R process.)

-   An alternate command is the `Run code` (cntl-option-n) in arrow drop-down in the file title bar or in the file's right-click context menu, to run the current file via `Rscript.` Be sure to save the file first.

Since there can be several active R processes, the current process PID is shown on the right in the Status bar. Either method to run code will pop up a graphics pane if necessary, which can be saved as a png file.

Other actions are analogous to those familiar in RStudio, but the interface is adapted to VS Code:

### Executing `.R` code in the source debugger

Yet another way to run `.R` code is to use the VS Code flavor debugger from the Run menu (keyboard shortcut: F5). This gives you the familiar breakpoint, variable inspection and debug console features of VS Code. *Apparently "Run without Debugging" calls the debugger just the same.*

Additionally for any "attached" process, in the far left sidebar, the ![R icon](./r_icon.png) icon brings up the "Workspace" with a browsable list of global R objects similar to the Rstudio Environment feature – a more full-featured inspector than the VS Code variable inspector, but not available with the VS Code debugger.

##### Honestly with the several execution methods provided, possibly attached to different R processes, it can get complicated to understand which process is running one's code, and what the current process state is.

#### Help Pages

Below the workspace inspector is the menu of help page tool. Similarly a file's right-click context menu "Open help for selection" will bring up the documentation file for an R object.

## 2. Running Jupyter R notebooks

The second engine for running `R` is to use the Jupyter notebook integration with VS Code. Conventional Jupyter notebooks can run `R` if they have installed an R kernel that connects them with your installed R executable. To set this up, at the `R` prompt install the [IRkernel](https://irkernel.github.io/installation/) package:

```         
    install.packages('IRkernel')
    IRkernel::installspec()     # to register the kernel, making it 
                                # visible to Jupyter.
```

Now restart VS Code and from the `New File...` menu item create a Jupyter notebook. To switch to the R kernel, click on the Select Kernel button above the notebook to the right. In the menu-bar popup, select the R executable, and the "MagicPython" dropdown on the cell will change to `R`. If no `R` kernel is shown, Choose "Select Another Kernel..." to find one. Once youe found one it will appear in the kernel selection menu.

![](select_kernel.png){width="500"}

As with Python, you have a choice with new cells to create them as either `R` or markdown cells.

In a notebook, a cell's graphic output will appear below the cell rather than in a separate pane.

### Notebooks for R \<-\> python interoperability

Alas your R notebook is for R code only; there is no option to mix notebook cells with different languages. VS Code python notebooks running a python kernel allow mixtures of cells of different languages but sadly this feature does not include `R`. You either chose an `R` kernel or a python one.

## 3. The `rpy2` python module.

To revisit this article's premise, there is a way where you can work freely between `R` and `python`. There's no need to choose one over the other.

In Jupyter notebooks that use the python kernel, one can use "R magics" to execute native R code. This is a feature built on the [python `rpy2` package](https://rpy2.github.io/). This is a way to insert R code in a native python notebook. [Several cloud services use the package](https://rpy2.github.io/doc/v3.5.x/html/generated_rst/notebooks.html)have built-in`rpy2` "magics" to transfer variables between the two languages. Think of the "magic" as a command that reads a variable from one process and writes it into the other. If you change a variable value in a cell in one language it needs to be re-imported to the other language gain access to it there.

#### To use `rpy2` in VS code notebooks.

Since "rpy2 magics" are not built-in to VS Code kernels, you need to load `rpy2` into the python kernel.

Of course your python environment needs the package installed:

`pip install rpy2`

First, configure your python notebook by loading `rpy2` with this cell magic in one of the notebook (preferably the first) cells:

`%load_ext rpy2.ipython`

Then in a cell where you want tor run `R` and import an existing python variable into the cell, say `my_df`, preface the cell with this magic:

`%%R -i my_df`

Similarly to export an `R` variable from an `R` cell so it's visible in python use

`%%R -o my_df`

The analogous single "%" R magic `%R -i my_df` imports from `R` into a python cell.

The `rpy2` python package continues to be supported to share dataframes between notebook cells in the two languages. [This blog](https://blog.revolutionanalytics.com/2016/01/pipelining-r-python.html) explains how.

To see documentation on the set of magic commands run `%magic` in a python cell.

#### Polyglot notebooks

Not surprisingly there are no python magic commands in notebooks running an R kernel. You may notice that cells in VS code python notebooks do give you a choice of languages. This is Microsoft's [polyglot notebooks Extension](https://code.visualstudio.com/docs/languages/polyglot#:~:text=and%20signature%20help.-,Variable%20Sharing%20and%20Variable%20Explorer,visit%20the%20Variable%20Sharing%20documentation.) built on top of .NET. When running a VS Code python notebook here's the drop-down for cell types. As mentioned `R` is not a choice.

![](magic_notebook_languages.png){width="170"}

## 4. Quarto: An alternative to multi-lingual notebooks

`Quarto` evolved from R-markdown, as a multi-purpose document generation tool, comprising the best of existing tools. In fact "R markdown" files, an extension of Markdown, finds a natural extension with Quarto `.qmd` files. An alternative to running `R` in Jupyter notebooks is the competitive feature of running code in quarto's `.qmd` files. It supports code blocks in multiple languages that are embedded in full-featured version of Markdown. Relevant to this article is their ability to use `R` and `python` together, sharing dataframes, using the `reticulate` library. See [this article](https://www.r-bloggers.com/2023/01/combining-r-and-python-with-reticulate-and-quarto/).

Quarto is designed to build beautiful documents around embedded, functioning code. In contrast Jupyter notebooks are intended as a programming environment, with a sequence of code cells interspersed with text. The line between them gets blurred as more features are added to both.

Quarto can be run from the command line, as a batch task that knits `.qmd` files into html, pdf or other formats. However it is fully integrated with Rstudio and VS Code so that one never needs resort to the command line.

Unlike with Jupyter notebooks, where the output of cell computations is included in-line following the cells, when running cells `.qmd` files, the output is shown in a separate pane. Cells in edit mode (unlike in visual mode) have a live link to execute them along their upper edge. Running an individual `R` cell injects the cell's code into a running interpreter window, with graphics displayed in separate panes. In Quarto `python` cell output can display in various ways, sometimes in a separate pane, called "Interactive", or in a pop-up window.

When rendered in a document, Quarto gives one freedom whether the code or the output is shown, or both. By default both the code and output are included. To not include the output use this comment in the cell:

```{r} 
#\| output: false 
# R code that you don't want to see output formals()
```


The comment to hide the code is `#| echo: false`. For global effect, these comments can also be included as `yaml`comments in the file header as shown here. For instance here's another comment instead to make the code visible in a drop down labeled "The code":

```         
---
title: "Folded code example"
format: html
code-fold: true
code-summary: "The code"
---
```

See the Quarto documentation on [Code Cells:Jupyter](https://quarto.org/docs/reference/cells/cells-jupyter.html) for all cell comment options.

## `Reticulate` Integrating python and R with Quarto

### Python in `.qmd` markdown files

Analogous to how `rpy2` makes it possible to share dataframes between `R` and `python` in jupyter notebooks, [`reticulate`](https://rstudio.github.io/reticulate/articles/r_markdown.html) makes the same possible in Quarto. The syntax is different. To retrieve a dataframe from a previous `python` cell use

```{r}
library(reticulate)
r_df<- py$python_df
```

The opposite conversion from `r` to `python` is

```{python}
python_df = r.r_df
```

I find sometimes that loading `library(reticulate)` is necessary, although Quarto sometimes will do it for you , assuming it is already installed in your `R` environment.

Once a python object is created from an R object it is available in all subsequently executed cells. The same holds true for R objects created from python.

## Bottom Line - which environment to use for which purpose?

This article is a brief survey of the existing `R - python` integrations available for the VS Code development environment. Here are my thoughts about when they come in useful.

1.  Running `R` code in VS code is a work-alike to running Rstudio. I find Rstudio more intuitive and R-ish, and having to suffer multiple ways to accomplish similar tasks in VS Code adds needless complication. But if you don't want to learn another tool, VS code runs R code just fine.

2.  When I need some R code capabilities not available in `python` (yes `R` still has better statistics and graphics libraries), I use `rpy2` to extend my Jupyter notebooks. This way I can still use the extensive features of VS Code such as evolving my (pure) notebooks into python modules. Running R notebooks *per se* has no advantages over running Quarto R - markup documents.

3.  I'm just learning Quarto not only for its "polyglot" `R - python` features but also for it's extensive document creation possibilities. This blog is actually created as a `.qmd` document. It remains to be seen how VS Code compares to RStudio as I get more facile with it.